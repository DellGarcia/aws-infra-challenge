AWSTemplateFormatVersion: '2010-09-09'
Description: 'Modelo de CloudFormation para conctruir parte de uma infraestrutura na AWS'

Parameters:
  InstanceType:
    Description: Tipo de instância EC2 para o Launch Template
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
    ConstraintDescription: Deve ser um tipo de instância EC2 válido.

  KeyName:
    Description: Informe uma chave de acess SSH
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Deve ser o nome de um KeyPair EC2 existente.

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  VPC:
    Description: VPC que será usada.
    Type: AWS::EC2::VPC::Id

  PublicSubnets:
    Description: Informe duas subnets públicas para o Load Balancer.
    Type: List<AWS::EC2::Subnet::Id>

  PrivateSubnets:
    Description: Informe um grupo de segurança para as Subredes privadas.
    Type: List<AWS::EC2::Subnet::Id>

  PrivateDataSubnets:
    Description: Informe um grupo de segurança para as Subredes privadas para dados.
    Type: List<AWS::EC2::Subnet::Id>

  InstanceSecurityGroup:
    Description: Informe um grupo de segurança para as instancias EC2.
    Type: AWS::EC2::SecurityGroup::Id

  EFSSecurityGroup:
    Description: Informe um grupo de segurança para o EFS.
    Type: AWS::EC2::SecurityGroup::Id

  LoadBalancerSecurityGroup:
    Description: Informe um grupo de segurança para o Load Balancer.
    Type: AWS::EC2::SecurityGroup::Id
  
  SSHLocation:
    Description: Defina quais IPs podem acessar o BastionHost.
    Type: String
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  SecretARN:
    Type: String
    Description: Informe o ARN do secret que contém as credencias do BD.

Resources:
  ### Secrets Manager
  SecretsManagerPolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: 'EC2SecretsManagerAccessPolicy'
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action: 'secretsmanager:GetSecretValue'
            Resource: !Ref SecretARN
      Roles:
        - !Ref EC2Role

  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 'EC2SecretsManagerAccessRole'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: 'ec2.amazonaws.com'
            Action: 'sts:AssumeRole'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: 'EC2SecretsManagerAccessProfile'
      Roles:
        - !Ref EC2Role


  ### EFS
  EFSFileSystem:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'
      FileSystemTags:
        - Key: Name
          Value: 'AWS-Infra-FS'

  MountTargetSubnet1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select
        - 0
        - !Ref PrivateDataSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
    DependsOn: EFSFileSystem

  MountTargetSubnet2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref EFSFileSystem
      SubnetId: !Select
        - 1
        - !Ref PrivateDataSubnets
      SecurityGroups:
        - !Ref EFSSecurityGroup
    DependsOn: EFSFileSystem
  ### FIM

  ### Launch Template / Auto Scaling / Load Balancer / Target Group
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AWS-Infra-LT
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !Ref InstanceSecurityGroup
        KeyName: !Ref KeyName
        IamInstanceProfile:
          Name: !Ref EC2InstanceProfile
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
            yum update -y
            yum install -y docker git jq aws-cfn-bootstrap amazon-efs-utils mysql 
            # mariadb105

            # Retrive credentials secret
            SECRET_NAME="credentials"
            REGION="us-east-1"
            CREDENTIALS=$(aws secretsmanager get-secret-value --secret-id "$SECRET_NAME" --region "$REGION" --query SecretString --output text)
            SECRET=$(echo "$CREDENTIALS" | jq -r '.credentials')

            SECRET_ARR=(${!SECRET//;/ })

            export MYSQL_HOST=${!SECRET_ARR[0]}
            MYSQL_PASS=${!SECRET_ARR[1]}

            mysql --user=admin --password=$MYSQL_PASS

            # Cria o diretório para o ponto de montagem
            mkdir -p /wordpress/wp-content
            EFS_ID="${EFSFileSystem}"
            mount -t efs $EFS_ID:/ /wordpress/wp-content/

            # Start Docker Service
            systemctl start docker

            # Install docker compose
            curl -L "https://github.com/docker/compose/releases/download/v2.33.1/docker-compose-$(uname -s)-$(uname -m)"  -o /usr/local/bin/docker-compose
            mv /usr/local/bin/docker-compose /usr/bin/docker-compose
            chmod +x /usr/bin/docker-compose      

            # Clone github repository
            #git clone https://DellGarcia:$PAT@github.com/DellGarcia/aws-infra-challenge.git
            git clone https://github.com/DellGarcia/aws-infra-challenge.git

            # Create .env
            cd ~
            echo "DB_HOST=$MYSQL_HOST
            DB_USER=admin
            DB_PASSWORD=$MYSQL_PASS
            DB_NAME=wordpress
            " >> .env
            mv .env /aws-infra-challenge
            cd /
            cd aws-infra-challenge

            # Start docker compose
            docker-compose up -d

            # Success Signal for CloudFormation
            /opt/aws/bin/cfn-signal -e 0 --stack ${AWS::StackName} --resource EC2AutoScalingGroup --region ${AWS::Region}

        TagSpecifications:
          - ResourceType: instance
            Tags:
              - Key: Name
                Value: PB- JUL 2025
              - Key: CostCenter
                Value: C092000024
              - Key: Project
                Value: PB- JUL 2025
          - ResourceType: volume
            Tags:
              - Key: Name
                Value: PB- JUL 2025
              - Key: CostCenter
                Value: C092000024
              - Key: Project
                Value: PB- JUL 2025

  # Auto Scaling
  EC2AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Timeout: PT10M
        Count: 1
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT10M
        WaitOnResourceSignals: true
    Properties:
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      DesiredCapacity: "2"
      MinSize: "2"
      MaxSize: "4"
      TargetGroupARNs:
        - !Ref TargetGroup
      HealthCheckType: ELB
      HealthCheckGracePeriod: 600
      VPCZoneIdentifier: !Ref PrivateSubnets

  TargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckPath: /wp-admin/install.php
      HealthCheckTimeoutSeconds: 25
      Name: AWSInfraTargetGroup
      Port: 80
      Protocol: HTTP
      TargetType: instance
      VpcId: !Ref VPC

  # Politicas de Escalonamento
  WebServerScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EC2AutoScalingGroup
      Cooldown: "60"
      ScalingAdjustment: 1

  WebServerScaleDownPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName: !Ref EC2AutoScalingGroup
      Cooldown: "60"
      ScalingAdjustment: -1
  
  # Alarmes / Triggers
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-up if CPU > 90% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 90
      AlarmActions:
        - !Ref WebServerScaleUpPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold

  CPUAlarmLow:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: Scale-down if CPU < 70% for 10 minutes
      MetricName: CPUUtilization
      Namespace: AWS/EC2
      Statistic: Average
      Period: 300
      EvaluationPeriods: 2
      Threshold: 70
      AlarmActions:
        - !Ref WebServerScaleDownPolicy
      Dimensions:
        - Name: AutoScalingGroupName
          Value: !Ref EC2AutoScalingGroup
      ComparisonOperator: LessThanThreshold

  # Load Balancer
  ElasticLoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !Ref LoadBalancerSecurityGroup
      Subnets: !Ref PublicSubnets
      Type: application

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TargetGroup
      LoadBalancerArn: !Ref ElasticLoadBalancer
      Port: 80
      Protocol: HTTP
  

Outputs:
  URL:
    Description: The URL of the website
    Value: !Join
      - ""
      - - http://
        - !GetAtt ElasticLoadBalancer.DNSName