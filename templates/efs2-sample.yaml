AWSTemplateFormatVersion: '2010-09-09'
Description: >-
  Template do CloudFormation para criar um sistema de arquivos EFS, dois
  mount targets e uma Launch Configuration para instâncias do Amazon Linux.

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id

  PrivateSubnets:
    Description: Subnets to be used
    Type: List<AWS::EC2::Subnet::Id>

  InstanceType:
    Description: Tipo de instância EC2 para o Launch Template
    Type: String
    Default: t3.micro
    AllowedValues:
      - t3.micro
    ConstraintDescription: Deve ser um tipo de instância EC2 válido.

  KeyName:
    Description: Nome de um KeyPair EC2 existente para acesso SSH
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: Deve ser o nome de um KeyPair EC2 existente.

  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2

  SSHLocation:
    Description: The IP address range that can be used to SSH to the EC2 instances
    Type: String
    Default: 0.0.0.0/0
    MinLength: 9
    MaxLength: 18
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

Resources:
  # Crie um sistema de arquivos EFS
  MyEFS:
    Type: 'AWS::EFS::FileSystem'
    Properties:
      Encrypted: true
      PerformanceMode: 'generalPurpose'
      ThroughputMode: 'bursting'
      FileSystemTags:
        - Key: Name
          Value: 'MyEFS'

  # Crie o primeiro mount target na Subnet 1
  MountTargetSubnet1:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Select
        - 0
        - !Ref PrivateSubnets
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
    DependsOn: MyEFS

  # Crie o segundo mount target na Subnet 2
  MountTargetSubnet2:
    Type: 'AWS::EFS::MountTarget'
    Properties:
      FileSystemId: !Ref MyEFS
      SubnetId: !Select
        - 1
        - !Ref PrivateSubnets
      SecurityGroups:
        - !GetAtt EFSSecurityGroup.GroupId
    DependsOn: MyEFS

  # Crie um Security Group para permitir o acesso NFS
  EFSSecurityGroup:
    Type: 'AWS::EC2::SecurityGroup'
    Properties:
      GroupDescription: 'Security Group para acesso ao EFS via NFS'
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 2049
          ToPort: 2049
          CidrIp: '0.0.0.0/0' # Recomenda-se restringir a um CIDR mais específico

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Metadata:
      guard:
        SuppressedRules:
          - INCOMING_SSH_DISABLED
    Properties:
      GroupDescription: Enable SSH access and HTTP from the load balancer only
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: !Ref SSHLocation
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC

  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: AWS-Infra-LT
      LaunchTemplateData:
        ImageId: !Ref LatestAmiId
        InstanceType: !Ref InstanceType
        SecurityGroupIds: 
          - !Ref InstanceSecurityGroup
        KeyName: !Ref KeyName
        UserData: !Base64
          Fn::Sub: |
            #!/bin/bash
          
            # Instala o utilitário nfs-utils (para Amazon Linux 2)
            sudo yum install -y amazon-efs-utils
            
            # Cria o diretório para o ponto de montagem
            sudo mkdir /mnt/efs
            
            # Obtém o ID do EFS
            EFS_ID="${MyEFS}"
            
            # Monta o EFS usando o DNS do mount target
            sudo mount -t efs $EFS_ID:/ /mnt/efs
            
            # Opcional: Adiciona a montagem ao /etc/fstab para que seja montado
            # automaticamente no reboot
            echo "$EFS_ID:/ /mnt/efs efs _netdev,noresvport,tls 0 0" | sudo tee -a /etc/fstab
